package com.example.taskmanager.bot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import com.example.taskmanager.service.TaskService;
import com.example.taskmanager.service.UserService;
import com.example.taskmanager.model.Task;
import com.example.taskmanager.model.User;
import com.example.taskmanager.model.Category;
import com.example.taskmanager.model.Priority;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
public class TaskManagerBot extends TelegramLongPollingBot {

    @Autowired
    private UserService userService;

    @Autowired
    private TaskService taskService;

    @Value("${bot.username}")
    private String botUsername;

    @Value("${bot.token}")
    private String botToken;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }

        String messageText = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();

        try {
            User user = userService.getUserByTelegramId(chatId);
            
            if (messageText.startsWith("/start")) {
                sendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TaskManager! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
            } else if (messageText.startsWith("/tasks")) {
                showTasks(chatId);
            } else if (messageText.startsWith("/today")) {
                showTodayTasks(chatId);
            } else if (messageText.startsWith("/add")) {
                addTask(chatId, messageText);
            } else if (messageText.startsWith("/complete")) {
                completeTask(chatId, messageText);
            } else if (messageText.equals("/help")) {
                showHelp(chatId);
            }
        } catch (Exception e) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void showTasks(Long chatId) {
        List<Task> tasks = taskService.getTasksByTelegramChat(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.");
            return;
        }

        StringBuilder message = new StringBuilder("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n");
        for (Task task : tasks) {
            message.append(formatTask(task));
        }
        sendMessage(chatId, message.toString());
    }

    private void showTodayTasks(Long chatId) {
        List<Task> tasks = taskService.getTodayTasks(chatId);
        if (tasks.isEmpty()) {
            sendMessage(chatId, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á.");
            return;
        }

        StringBuilder message = new StringBuilder("–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n");
        for (Task task : tasks) {
            message.append(formatTask(task));
        }
        sendMessage(chatId, message.toString());
    }

    private void addTask(Long chatId, String message) {
        try {
            String[] parts = message.split(" ", 2);
            if (parts.length < 2) {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏");
                return;
            }

            Task task = new Task();
            task.setTitle(parts[1]);
            task.setUser(userService.getUserByTelegramId(chatId));
            task.setCreatedAt(LocalDateTime.now());
            
            taskService.createTask(task);
            sendMessage(chatId, "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: " + task.getTitle());
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private void completeTask(Long chatId, String message) {
        try {
            String[] parts = message.split(" ", 2);
            if (parts.length < 2) {
                sendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /complete ID_–∑–∞–¥–∞—á–∏");
                return;
            }

            Long taskId = Long.parseLong(parts[1]);
            taskService.completeTask(chatId, taskId);
            sendMessage(chatId, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!");
        } catch (NumberFormatException e) {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–¥–∞—á–∏");
        } catch (Exception e) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + e.getMessage());
        }
    }

    private String formatTask(Task task) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
        return String.format("ID: %d\nüìå %s\nüïí %s\n%s\n\n",
            task.getId(),
            task.getTitle(),
            task.getDeadline() != null ? task.getDeadline().format(formatter) : "–ë–µ–∑ —Å—Ä–æ–∫–∞",
            task.isCompleted() ? "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" : "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        );
    }

    private void showHelp(Long chatId) {
        String helpText = """
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
            /tasks - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
            /today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            /add [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            /complete [ID] - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            """;
        sendMessage(chatId, helpText);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}